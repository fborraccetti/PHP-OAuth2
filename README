                    ___________________________________
  
                    Light PHP wrapper for the OAuth 2.0
                    ___________________________________


AUTHOR & CONTACT
================

Charron Pierrick
    - pierrick@webstart.fr

Berejeb Anis
    - anis.berejeb@gmail.com

    
DOCUMENTATION & DOWNLOAD
========================

Latest version is available on github at :
    - https://github.com/adoy/PHP-OAuth2

Documentation can be found on : 
    - https://github.com/adoy/PHP-OAuth2


LICENSE
=======

This Code is released under the GNU LGPL

Please do not change the header of the file(s).

This library is free software; you can redistribute it and/or modify it 
under the terms of the GNU Lesser General Public License as published 
by the Free Software Foundation; either version 2 of the License, or 
(at your option) any later version.

This library is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU Lesser General Public License for more details.


How can I use it ?
==================

Facebook Example
==================

require('Client.php');
require('GrantType/IGrantType.php');
require('GrantType/AuthorizationCode.php');

$provider = array(
    'clientId'                => 'CLIENT ID',    // The client ID assigned to you by the provider
    'clientSecret'            => 'APP SECRET KEY',   // The client password assigned to you by the provider
    'redirectUri'             => 'YOUR ENDPOINT',
    'authorizationEndpoint'   => 'https://graph.facebook.com/oauth/authorize',
    'tokenEndpoint'           => 'https://graph.facebook.com/oauth/access_token',
	'extra_parameters'		  => array('scope'=>'email,public_profile'),
	'parameters'              => 'fields=first_name,last_name,id,name,email'

);

$client = new OAuth2\Client(CLIENT_ID, CLIENT_SECRET);
if (!isset($_GET['code']))
{
	$auth_url = $client->getAuthenticationUrl($provider['authorizationEndpoint'], $provider['redirectUri'],$provider['extra_parameters']);
	header('Location: ' . $auth_url);
	die('Redirect');
}
else
{
	$params = array('code' => $_GET['code'], 'redirect_uri' => $provider['redirectUri']);
	$client = new OAuth2\Client($provider['clientId'], $provider['clientSecret']);
	$response = $client->getAccessToken($provider['tokenEndpoint'], 'authorization_code', $params);
	$client->setAccessToken($response['result']['access_token']);
	$response = $client->fetch('https://graph.facebook.com/me',$provider['parameters']);
}


Google Example
==================

require('Client.php');
require('GrantType/IGrantType.php');
require('GrantType/AuthorizationCode.php');

$provider = array(
    'clientId'                => 'CLIENT ID.apps.googleusercontent.com',    // The client ID assigned to you by the provider
    'clientSecret'            => 'APP SECRET KEY',   // The client password assigned to you by the provider
    'redirectUri'             => 'YOUR ENDPOINT',
	'authorizationEndpoint'   => 'https://accounts.google.com/o/oauth2/auth',
	'tokenEndpoint'           => 'https://accounts.google.com/o/oauth2/token',
	'extra_parameters'        => array('scope'=>'https://www.googleapis.com/auth/userinfo.email')

);

$client = new OAuth2\Client(CLIENT_ID, CLIENT_SECRET);
if (!isset($_GET['code']))
{
	$auth_url = $client->getAuthenticationUrl($provider['authorizationEndpoint'], $provider['redirectUri'],$provider['extra_parameters']);
	header('Location: ' . $auth_url);
	die('Redirect');
}
else
{
	$client->setAccessToken($response['result']['access_token']);
	$response = $client->fetch('https://www.googleapis.com/plus/v1/people/me/openIdConnect');
}


How can I add a new Grant Type ? 
================================
Simply write a new class in the namespace OAuth2\GrantType. You can place the class file under GrantType. 
Here is an example :

namespace OAuth2\GrantType;

/**
 * MyCustomGrantType Grant Type 
 */
class MyCustomGrantType implements IGrantType
{
    /**
     * Defines the Grant Type
     * 
     * @var string  Defaults to 'my_custom_grant_type'. 
     */
    const GRANT_TYPE = 'my_custom_grant_type';

    /**
     * Adds a specific Handling of the parameters
     * 
     * @return array of Specific parameters to be sent.
     * @param  mixed  $parameters the parameters array (passed by reference)
     */
    public function validateParameters(&$parameters)
    {
        if (!isset($parameters['first_mandatory_parameter']))
        {
            throw new \Exception('The \'first_mandatory_parameter\' parameter must be defined for the Password grant type');
        }
        elseif (!isset($parameters['second_mandatory_parameter']))
        {
            throw new \Exception('The \'seconde_mandatory_parameter\' parameter must be defined for the Password grant type');
        }
    }
}

call the OAuth client getAccessToken with the grantType you defined in the GRANT_TYPE constant, As following : 
$response = $client->getAccessToken(TOKEN_ENDPOINT, 'my_custom_grant_type', $params);

